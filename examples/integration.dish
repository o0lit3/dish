// https://rosettacode.org/wiki/Numerical_integration

integrate = :a:b:steps:func:total(
  delta: 1 * (b - a) / steps
  >> ((0..steps - 1).each:i(total += (delta * [a + i * delta, a + i * delta + delta].func).round(9)))
)

[
  {name: "x ** 2", func: :x(x ** 2), a: 0, b: 3.14, steps: 10}
  {name: "x ** 3", func: :x(x ** 3), a: 0, b: 1, steps: 100}
  {name: "1 / x", func: :x(1 / x), a: 1, b: 100, steps: 1000}
  {name: "x.sin", func: :x(x.sin), a: 0, b: 3.14, steps: 10}
].map:obj(
  func: obj.func

  obj.name ~ " (a = $(obj.a), b = $(obj.b), steps = $(obj.steps)):\n" ~ {
    left: :x:y(x.func)
    mid: :x:y(((x + y) / 2).func)
    right: :x:y(y.func)
    trap: :x:y((x.func + y.func) / 2)
    simpson: :x:y((x.func + 4 * ((x + y) / 2).func + y.func) / 6)
  }.each:func:key(
    key ~ ': ' ~ [obj.a, obj.b, obj.steps, func].integrate
  ).arr().join("\n")
).join("\n\n")
